package tech.coner.trailer.render.html

import kotlinx.html.*
import kotlinx.html.dom.createHTMLDocument
import kotlinx.html.dom.serialize
import tech.coner.trailer.Event
import tech.coner.trailer.eventresults.EventResults
import tech.coner.trailer.render.EventResultsRenderer

abstract class HtmlEventResultsRenderer<ER : EventResults>(
    protected val columns: List<HtmlEventResultsColumn>
) : EventResultsRenderer<ER, String, HtmlBlockTag.() -> Unit>, HtmlRenderer {

    override fun render(event: Event, results: ER): String = createHTMLDocument()
        .html {
            fun titleText() = "${event.name} - ${event.date} - ${results.type.title}"
            head {
                installBootstrap()
                title { + titleText() }
                style { unsafe { raw(headerStylesheet(event, results)) } }
                installConerTrailerStylesheet()
            }
            body {
                id = "event-results"
                classes = setOf("container-xl")
                renderNavbar(event, results)
                partial(event, results)()
                renderFooter()
            }
        }
        .serialize()

    private fun BODY.renderNavbar(event: Event, results: ER) {
        nav {
            classes = setOf("navbar", "navbar-expand", "navbar-dark", "bg-secondary")
            div {
                classes = setOf("container-fluid")
                renderBrand(event)
                renderText(event, results)
            }
        }
    }

    private fun DIV.renderBrand(event: Event) {
        span {
            classes = setOf("navbar-brand", "mb-0", "h1")
            text(event.policy.club.name)
        }
    }

    private fun BODY.renderFooter() {
        footer {
            classes = setOf("container-fluid", "bg-secondary", "text-white")
            text("Generated by ")
            a(href = "https://github.com/coner-tech/coner-trailer") {
                text("Coner Trailer")
            }
        }
    }

    protected open fun DIV.renderText(event: Event, results: ER) {
        span {
            classes = setOf("navbar-text", "text-white")
            text(event.name)
        }
    }

    protected open fun headerStylesheet(event: Event, results: ER): String {
        return columns
            .flatMap { it.buildStyles(event, results) }
            .distinct()
            .joinToString(separator = "\n")
    }
}